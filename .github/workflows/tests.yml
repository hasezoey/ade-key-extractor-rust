name: Rust Tests

on:
  push:
  pull_request:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      git-ref:
        description: Git Ref (Optional)
        required: false

jobs:
  # Check rustfmt
  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
          components: rustfmt
      - run: sh ./fmt.sh

  # Check clippy.  This doesn't check ARM though.
  clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - run: sh ./clippy.sh

  tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        toolchain: [stable, nightly, "1.75"]
    steps:
      - uses: actions/checkout@v3
        if: github.event.inputs.git-ref == ''
      - uses: actions/checkout@v3
        if: github.event.inputs.git-ref != ''
        with:
          ref: ${{ github.event.inputs.git-ref }}
      - name: Install Toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.toolchain }}
          targets: x86_64-unknown-linux-gnu,x86_64-pc-windows-msvc
      - uses: taiki-e/install-action@v2
        with:
          tool: xwin
      - name: Load xwin cache
        # cache the package so that we dont need to hit the xwin / microsoft server so often
        id: cache-xwin
        uses: actions/cache@v4
        with:
          path: |
            .xwin
            .xwin-cache
          key: xwin
      - name: install msvc
        run: xwin --accept-license splat --output ./.xwin
      - name: Build all binaries for linux
        run: cargo build --workspace --all-features
      - name: Build windows / wine binaries
        run: cargo build --target=x86_64-pc-windows-msvc --bin ade-extract-winapi-bin
      - name: Tests
        run: cargo test --workspace --all-features --no-fail-fast
        env:
          RUST_BACKTRACE: full
  # publish:
  #   if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/beta'
  #   needs: [tests, clippy, rustfmt]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Use Node.js 16
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 16.x
  #     - name: Install node_modules
  #       run: yarn install
  #     - name: Install Toolchain
  #       uses: actions-rs/toolchain@v1
  #       with:
  #           profile: minimal
  #           toolchain: nightly
  #           override: true
  #           components: rustfmt, clippy
  #     - name: Install semantic-release-rust
  #       run: cargo install semantic-release-rust --version 1.0.0-alpha.8 # TODO: update version when it becomes available
  #     - name: Semantic Release (github release)
  #       run: yarn semantic-release
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
